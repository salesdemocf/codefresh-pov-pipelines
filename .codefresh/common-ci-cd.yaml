# Pipeline with simple clone, build/push, report and nested application creation
# Includes Development environment promotion

# Required Variables

# Pipeline Variables
# GIT_INTEGRATION_NAME
# - Name of GIT Pipeline Integration.
# GITOPS_RUNTIME_NAME
# - Name of GitOps Runtime.
# CONFIGURATIONS_REPOSITORY
# - Name of VCS Repository containing configuration files.
# ISC_REPOSITORY
# - Name of VCS Repository containing Codefresh configuration files.  ISC or Internal Shared Configurations.
# APPLICATIONS_REPOSITORY
# - Name of VCS Repository container ArgoCD application manifests.
# IMAGE_REGISTRY_DOMAIN
# - Domain FQDN of image registry.
# IMAGE_REGISTRY_NAME
# - Name of image registry.
# IMAGE_REGISTRY_USERNAME
# - Username for image registry.
# IMAGE_REGISTRY_PASSWORD
# - Password for image registry.
# CODEFRESH_PROJECT_NAME
# Name for Codefresh pipeline project.
# ARGOCD_SEED_APPLICATION_PIPELINE
# Name for ArgoCD application seed pipeline.
# CONFIGS_SEED_APPLICATION_PIPELINE
# Name for Configuration seed pipeline.


# Trigger Variables
# APPLICATION_NAME
# The name of the Application possibly CF_REPO_NAME as a default

version: '1.0'
stages:
  - clone
  - build
  - report
  - seed
  - promote

steps:
  clone:
    type: parallel
    steps:
    # Clone Source Code Repository
      clone_src:
        title: Cloning Source Code Repository...
        type: git-clone
        repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
        revision: ${{CF_REVISION}}
        git: ${{GIT_INTEGRATION_NAME}}

    # Clone Configuration Repository
      clone_configs:
        title: Cloning Configuration Repository...
        type: git-clone
        repo: ${{CF_REPO_OWNER}}/${{CONFIGURATIONS_REPOSITORY}}
        revision: main
        git: ${{GIT_INTEGRATION_NAME}}

    # Clone Applications Repository
      clone_apps:
        title: Cloning Applications Repository...
        type: git-clone
        repo: ${{CF_REPO_OWNER}}/${{APPLICATIONS_REPOSITORY}}
        revision: main
        git: ${{GIT_INTEGRATION_NAME}}
    stage: clone


# Build Image
  build:
    title: Building Docker Image...
    type: build
    working_directory: ${{clone_src}}
    image_name: ${{APPLICATION_NAME}}
    tag: ${{CF_SHORT_REVISION}}
    dockerfile: Dockerfile
    stage: build

# Report Image
  report:
    title: Reporting Image to Codefresh...
    type: codefresh-report-image
    working_directory: /code
    arguments:
      CF_API_KEY: ${{CF_API_KEY}}
      CF_RUNTIME_NAME: ${{GITOPS_RUNTIME_NAME}}
      CF_REGISTRY_DOMAIN: ${{IMAGE_REGISTRY_DOMAIN}}
      CF_REGISTRY_USERNAME: ${{IMAGE_REGISTRY_USERNAME}}
      CF_REGISTRY_PASSWORD: ${{IMAGE_REGISTRY_PASSWORD}}
      CF_GIT_REPO: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
      CF_GIT_BRANCH: ${{CF_REVISION}}
      CF_IMAGE: ${{IMAGE_REGISTRY_DOMAIN}}/${{IMAGE_REGISTRY_NAME}}/${{APPLICATION_NAME}}:${{CF_SHORT_REVISION}}
      # CF_ISSUE_TRACKING_INTEGRATION: jira-integration-name
      # CF_JIRA_MESSAGE: jira-message
      # CF_JIRA_PROJECT_PREFIX: jira-project-prefix
    stage: report

# [Optional] - Application Creation

  check:
    type: parallel
    steps:
    # Check Conifguration Files
      check_configuration_files:
        title: Checking for Configuration Files...
        type: freestyle
        image: quay.io/codefresh/alpine
        working_directory: ${{clone_configs}}
        commands:
          - echo "Checking for Configuration Folder of ${{APPLICATION_NAME}}"
          - ls ${{APPLICATION_NAME}} || cf_export CONFIGURATION_FILES_NOT_FOUND=true;

    # Check ArgoCD Files
      check_argocd_files:
        title: Checking for ArgoCD FIles...
        type: freestyle
        image: quay.io/codefresh/alpine
        working_directory: ${{clone_apps}}
        commands:
          - echo "Checking for ArgoCD Application file for ${{APPLICATION_NAME}}"
          - cat development/${{APPLICATION_NAME}}.yaml || cf_export ARGOCD_FILES_NOT_FOUND=true
          - cat staging/${{APPLICATION_NAME}}.yaml || cf_export ARGOCD_FILES_NOT_FOUND=true
          - cat production/${{APPLICATION_NAME}}.yaml || cf_export ARGOCD_FILES_NOT_FOUND=true
    stage: seed

  seed:
    type: parallel
    steps:
    # Seed Configuration Files
      seed_configurations_files:
        title: Creating Configuration Files...
        type: codefresh-run
        arguments:
          PIPELINE_ID: '${{CODEFRESH_PROJECT_NAME}}/${{CONFIGS_SEED_APPLICATION_PIPELINE}}'
          BRANCH: main
          TRIGGER_ID: disabled-default-trigger
          VARIABLE:
            - APPLICATION_NAME=${{APPLICATION_NAME}}
            - CONFIGURATIONS_REPOSITORY=${{CONFIGURATIONS_REPOSITORY}}
            - ISC_REPOSITORY=${{ISC_REPOSITORY}}
            - GIT_INTEGRATION_NAME=${{GIT_INTEGRATION_NAME}}
            - FQDN_IMAGE=${{IMAGE_REGISTRY_DOMAIN}}/${{IMAGE_REGISTRY_NAME}}/${{APPLICATION_NAME}}
            - IMAGE_TAG=${{CF_SHORT_REVISION}}
        when:
          condition:
            all:
              whenConfigurationFilesNotFound: '"${{CONFIGURATION_FILES_NOT_FOUND}}" == "true"'

    # Seed ArgoCD Files

      seed_argocd_files:
        title: Creating ArgoCD Files...
        type: codefresh-run
        arguments:
          PIPELINE_ID: '${{CODEFRESH_PROJECT_NAME}}/${{ARGOCD_SEED_APPLICATION_PIPELINE}}'
          BRANCH: main
          TRIGGER_ID: disabled-default-trigger
          VARIABLE:
            - APPLICATION_NAME=${{APPLICATION_NAME}}
            - APPLICATIONS_REPOSITORY=${{APPLICATIONS_REPOSITORY}}
            - CONFIGURATIONS_REPOSITORY=${{CONFIGURATIONS_REPOSITORY}}
            - GIT_INTEGRATION_NAME=${{GIT_INTEGRATION_NAME}}
        when:
          condition:
            all:
              whenArgoCDFilesNotFound: '"${{ARGOCD_FILES_NOT_FOUND}}" == "true"'
    stage: seed

# / Application Creation

# Update Development to start Promotion Workflows

  change_dev_overlay:
    title: Updating Development Overlay...
    type: freestyle
    image: quay.io/codefresh-contrib/yq:4
    working_directory: ${{clone_configs}}
    commands:
      - echo 'Before Changes'
      - cat ${{APPLICATION_NAME}}/overlays/development/replace.yaml
      - export NEW_IMAGE_VERSION=${{IMAGE_REGISTRY_DOMAIN}}/${{IMAGE_REGISTRY_NAME}}/${{APPLICATION_NAME}}:${{CF_SHORT_REVISION}}
      - yq e -i '.[].value=strenv(NEW_IMAGE_VERSION)' ${{APPLICATION_NAME}}/overlays/development/replace.yaml
      - echo 'After Changes'
      - cat ${{APPLICATION_NAME}}/overlays/development/replace.yaml
    stage: promote
    when:
      condition:
        all:
          whenConfigurationFilesFound: 'includes("${{CONFIGURATION_FILES_NOT_FOUND}}", "{{CONFIGURATION_FILES_NOT_FOUND}}") == true'
          maimBranch: '"${{CF_BRANCH}}" == "main"'

  check_for_untracked_changes:
    title: Checking for GIT Diff...
    image: quay.io/codefresh-contrib/alpine/git
    working_directory: ${{clone_configs}}/${{APPLICATION_NAME}}/development
    commands:
      - git diff --exit-code || cf_export CHANGED_FILES_FOUND=true;
    stage: promote
    when:
      condition:
        all:
          whenConfigurationFilesFound: 'includes("${{CONFIGURATION_FILES_NOT_FOUND}}", "{{CONFIGURATION_FILES_NOT_FOUND}}") == true'
          maimBranch: '"${{CF_BRANCH}}" == "main"'

  commit_and_push:
    title: Committing Updated Development Overlay...
    type: git-commit
    arguments:
      repo: ${{CF_REPO_OWNER}}/${{CONFIGURATIONS_REPOSITORY}}
      git: ${{GIT_INTEGRATION_NAME}}
      working_directory: '${{CF_VOLUME_PATH}}/${{CONFIGURATIONS_REPOSITORY}}'
      commit_message: 'Deploying changes to ${{APPLICATION_NAME}} in Development'
      git_user_name: codefresh-automation
      git_user_email: automation@codefresh.io
      rebase: true
    stage: promote
    when:
      condition:
        all:
          whenUntrackedFilesFound: '"${{CHANGED_FILES_FOUND}}" == "true"'